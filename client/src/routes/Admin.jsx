import { useEffect, useState } from "react"
import { useAuthContext, useUserContext } from "../hooks"

export const Admin = () => {
    const { users, getUsers, updateUser, deleteUser } = useUserContext();
    const { user: currentUser } = useAuthContext();
    const [loaded, setLoaded] = useState(false);
    useEffect(() => {
        if (!loaded) getUsers().then(() => setLoaded(true))
    }, [loaded, getUsers])

    const [editId, setEditId] = useState(null);
    const [fields, setFields] = useState({ username: '', admin: false })
    const handleChange = (e) => {
        const { value, type, checked, name } = e.target;
        setFields(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value }))
    }

    const toggleEdit = ({ _id, username, admin }) => {
        if (_id === editId) {
            setEditId(null);
            setFields({ username: '', admin: false })
        } else {
            setEditId(_id);
            setFields({ username, admin })
        }
    }

    const handleSave = async (user) => {
        await updateUser(user, fields);
        setFields({ username: '', admin: false });
        setEditId(null);
    }

    const handleDelete = async (user) => {
        await deleteUser(user);
        setFields({ username: '', admin: false });
        setEditId(null);
    }

    const renderUsernameCell = (user) => {
        if (editId === user._id) return <input type="text" name='username' value={fields.username} onChange={handleChange} placeholder={user.username} />
        return user.username
    }

    const renderAdminCell = (user) => {
        if (editId === user._id) return <label htmlFor={user._id}><input id={user._id} type="checkbox" name='admin' checked={fields.admin} onChange={handleChange} disabled={user._id === currentUser._id} />Make Admin?</label>
        return user.admin ? 'Admin' : 'User';
    }

    return (
        <div>
            <h1>Manage Users</h1>
            <table style={{ width: '100%', tableLayout: 'fixed', textAlign:'left' }}>
                <thead>
                    <tr>
                        <th>Username</th>
                        <th>Type</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {users.map(u => (
                        <tr key={u._id}>
                            <td>{renderUsernameCell(u)}</td>
                            <td>{renderAdminCell(u)}</td>
                            <td>
                                <button disabled={u._id === currentUser._id} onClick={() => handleDelete(u)}>Delete</button>
                                <button onClick={() => toggleEdit(u)}>{u._id === editId ? 'Cancel' : 'Edit'}</button>
                                {u._id === editId && <button onClick={() => handleSave(u)}>Save</button>}
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    )
}