import { useCallback, useContext, useEffect, useState } from "react";
import { httpAuthClient, httpClient } from "./http";
import { AuthContext, UserContext } from "./contexts";


export const useAuthAPI = () => {
    const [user, setUser] = useState(null);
    const [authorizing, setAuthorizing] = useState(true);

    const login = async (credentials) => {
        const { data } = await httpClient.post('/auth/login', { user: credentials });
        setUser(data.user);
        localStorage.setItem('access_token', data.accessToken);
    }

    const signup = async (credentials) => {
        const { data } = await httpClient.post('/auth/signup', { user: credentials });
        setUser(data.user);
        localStorage.setItem('access_token', data.accessToken);
    }

    const authorize = useCallback(async () => {
        if (user) return;
        const { data } = await httpAuthClient.get('/auth/authorize');
        setUser(data.user);
    }, [user])

    const logout = () => {
        setUser(null);
        localStorage.removeItem('access_token');
    }

    useEffect(() => {
        if (!authorizing) return;
        authorize()
            .catch((err) => {
                console.error(err);
            })
            .finally(() => setAuthorizing(false))
    }, [authorizing, authorize])

    return {
        user,
        setUser,
        authenticated: !!user,
        isAdmin: !!user && user.admin,
        authorizing,
        signup,
        login,
        authorize,
        logout
    }
}

export const useAuthContext = () => useContext(AuthContext);

export const useUserApi = () => {

    const { user: currentUser, setUser: setCurrentUser } = useAuthContext();
    const [users, setUsers] = useState([]);

    const getUsers = async () => {
        const { data } = await httpAuthClient.get('/api/users');
        setUsers(data.users);
    }

    const updateUser = async (user, fields) => {
        const { data } = await httpAuthClient.put(`/api/users/${user._id}`, { user: fields });
        setUsers(prev => prev.map(u => u._id === data.user._id ? data.user : u))
        if (data.user._id === currentUser._id) setCurrentUser(data.user);
    }

    const deleteUser = async (user) => {
        const { data } = await httpAuthClient.delete(`/api/users/${user._id}`);
        setUsers(prev => prev.filter(u => u._id !== data.id))
    }

    return {
        users,
        getUsers,
        updateUser,
        deleteUser
    }
}

export const useUserContext = () => useContext(UserContext)